# HIV-PhyloTSI bioinformatics pipeline { background-color="`r clrs[2]`"}

:::{ .notes}
30 minutes, talk about the pipeline. 
Break it in four parts.
:::

## Demistifying the process { background-color="`r clrs_lt[2]`"}

:::{ .notes }
objective is to describe and demistify the bioinformatics pipeline.
    - process of obtaining tsi estimates from blood samples of HIV positive individuals.
    - the pipeline is an essential part of the process, but we 1. no time and 2. implementation is technical and out-of-scope.
:::

```{mermaid}
flowchart LR 
START[(HIV+ blood samples)]
M1[???]
M2[???]
M3[???]
END[(TSI estimates)]

START --> M1 --> M2 --> M3 --> END
```

- In this section, want to **describe** processes and **data manipulation** carried out by the pipeline.
- **Not** the actual **implementation** of the pipeline.

Main steps: 

- Next Generation Sequencing (NGS)
- Constructing phylogenies     [**MANY!**]{.fragment}
- Analysing phylogenies   


## Next Generation Sequencing { background-color="`r clrs_lt[2]`"}

::: {.notes}
NGS is the fundamental technology to capture and measure within-host diversity.
It allows to sequence multiple viral strains from the same infected individuals,
aligning them to the same reference sequence. As compared to the traditional Sanger
sequencer, it allows to identify mutations, provide estimates of viral load and 
opens new doors.
-> fast, high-throughput, cost efficient
:::

- simultaneous sequencing of multiple viral particles to capture within-host diversity
- PANGEA protocols: Gall [@gall_universal_2012] and Bonsall et al.[@bonsall_comprehensive_2018]
- TSI pipeline starts with the outputs produced by `shiver` [@wymant_easy_2018]: `*.bam`, `*.ref.fasta`

![](figures/shiver.png){fig-align=center}

## Grouping & multiple sequence alignment { background-color="`r clrs_lt[2]`"}

::: {.notes}
If there are multiple sequences per host, and there are many hosts for which we 
want predictions, the total number of sequences to consider increases very fast.
Further, inferring tree structures becomes harder with the length of the sequences,
and therefore we typically break the genome in chunks which are  ~250 bp long.
To avoid working with too many parts, we group individuals (or hosts) in groups 
of size 50, and aim to build one phylogeny per group, per 250 bp long genetic 
window.
Building trees requires that we are able to map chunks of one virus' genome to 
another virus' genome (ie. comparing apple to apples.)
Additionally, a set of "reference sequences" is used to make sure that alignments
are "similar" across different groups of people.
plot is too small right now
:::

- Many sequences, many hosts, many genome windows [-> **group by host!**]{.fragment} 
- aligning to compare "apples to apples": MAFFT [@katoh_mafft_2002]

![](figures/deepseqalign_workshop.png){.fragment fig-align=center}
::: {.footer}
The figure was generated with AliView
::: 

## Inferring phylogenies { background-color="`r clrs_lt[2]`"}

::: {.notes}
Now that we obtained the alignments for every group of hosts and genome window,
we can produce phylogenetic trees describing the evolutionary dependencies 
within- and between- hosts. This is done through IQTREE 
:::

- Phylogenies are made through IQTREE by group and window through IQTREE [@nguyen_iq-tree_2015]

![](figures/ptyr1_InWindow_9075_to_9324_v2.treefile.png){fig-align=center}

:::{.footer}
The image was generated with FigTree
::: 

## Analysing phylogenies { background-color="`r clrs_lt[2]`"}

::: {.notes}
Once the trees are made, we need to programmatically study them and summarise
them. We have seen in the previous section how features such as Longest Root to
Tip distance are associated with time since infection and we would like to 
measure this along the entire genome.
This is where `phyloscanner` comes into play. This is a tool which was principally
developed to answers questions such as 'whom infected whom', but which produces
a lot of useful summary information.
These are included in the patient statistics file: `patStats`, which will be 
the input the HIV-phyloTSI algorithm later on.
FIGURE: 5 small treefiles with a } bracket pointing to csv file
:::

- `phyloscanner` (TOCITE) summarizes each tree through summary statistics:
- `patStats.csv`: contains LRTT, number of tips, etc...


## Minor Allele Frequencies { background-color="`r clrs_lt[2]`"}

:::{.notes}
We almost have all the ingredients to cook Tanyas' recipe: we are only missing 
Minor Allele Frequencies, which are a measure on the number of mutations that 
have appeared over time. Specifically, these are computed as the fraction of 
non-majority bases over all reads observeed at that position.
Note that these measures are completely independent of the grouping/alignment 
procedures discussed previously, and can be independently obtained for each 
individuals sequence
:::

- $\text{MAF} = ( 1 - \text{proportion of majority bases}) / \text{depth}$
- Evaluated at first 2 codos positions (`MAF12c`) and/or third codon position (`MAF3c`)

![](figures/maf.png){fig-align=center}


## HIV-phyloTSI { background-color="`r clrs_lt[2]`"}

::: {.notes}
Now that we have summarised the phylogenetic trees and evaluated diversity of the 
different reads, we have all the ingredients that are necessary to run HIV-phyloTSI.
This is the section we specifically focus on during the practical. 
:::

- described in @golubchik_hiv-phylotsi_2022, [code](https://github.com/BDI-pathogens/HIV-phyloTSI/tree/main)
- Focus of the practical session, 
- takes as input features of phylogenies and MAFs.
- returns a `csv` file with TSI estimates and some uncertainty range.

## Summary { .smaller background-color="`r clrs_lt[2]`"}

::: {.notes}
So, to summarise, the differet steps are run according to this scheme.
:::

::: {.absolute top=20}
```{mermaid }
graph LR
    subgraph S1["Primary Data Patients"]
        direction TB
        I01[(*.bam)] 
        I02[(*ref_fasta)] 
        I02b[(*BaseFreqs_WithHXB2.csv)]
    end

    subgraph S2["Reference Sequences"]
        I03[(*.fasta)] 
    end

    subgraph S3["Multiple Sequence Alignment"]
        P1(mafft)
        O1[(*.fasta)]
    end

    subgraph S4["Constructing Phylogenies"]
        direction TB
        P2(IQTREE)
        O2[( *.iqtree )]
    end
    
    subgraph S2b["Computing MAFs"]
      direction TB
      P2b(script)
      O2b[(maf.csv)]
    end

    subgraph S5["Analysing phylogenies"]
        direction TB
        P3( PhyloscannerR ) 
        O3[(*PatStats.csv)]
    end

    subgraph S6["Obtain TSI estimates"]
        direction TB
        P4( HIV-phyloTSI ) 
        O4[(TSI.csv)]
    end
    
    classDef Red fill:#F84E68
    class S3,S4 Red
    classDef Orange fill:orange
    class S5,S6 Orange

I02 --> P1
I01 --> P1 
I02b --> P2b --> O2b --> P4
I03 --> P1
    P1 --> O1
O1 --> P2 
    P2 --> O2
O2 --> P3 
    P3 --> O3
O3 --> P4 
    P4 --> O4
```
:::

:::: {.absolute bottom=55}
::: {.callout-note}
Steps run for each group and window are shown in red, while those running by group in orange
:::
:::: 

## But what is HIV-phyloTSI doing? { background-color="`r clrs_lt[2]`"}

::: {.notes}
Before we move to the practical, it may be worth to spend a couple minutes to 
explain what HIV-phyloTSI is doing under the hood: what type of ML model it is 
using and how it was trained.

random forest algorithm: little intuition
Good thing is we do not need to understand the little details as long as we use 
the code provided.
:::

- **ML algorithm**, in particular Random Forest.